mixin react-app-examples()
    section.section__wrapper(class="animate__animated animate__fadeInDown")
        .accordion--title
            h2 Create an element using Javascript Vanilla
            span.fa.fa-caret-down
        .accordion--content
            +display({
                "id":"display1",
                "html": true,
                "css": false,
                "js": true,
                "height":"300px",
                "htmlfile":"code1"
            })
            .result__container--outer 
                h3 Result
                .result__container--outer-render

    section.section__wrapper(class="animate__animated animate__fadeInDown")
        .accordion--title
            h2 Create an element using React
            span.fa.fa-caret-down
        .accordion--content
            +display({
                "id":"display2",
                "html": true,
                "css": false,
                "js": true,
                "height":"300px",
                "htmlfile":"code2"
            })
            .result__container--outer 
                h3 Result
                .result__container--outer-render
            
    section.section__wrapper(class="animate__animated animate__fadeInDown")
        .accordion--title
            h2 Create a nested element using React
            span.fa.fa-caret-down
        .accordion--content
            +display({
                "id":"display4",
                "html": true,
                "css": false,
                "js": true,
                "height":"500px",
                "htmlfile":"code4"
            })
            .result__container--outer 
                h3 Result
                .result__container--outer-render

    section.section__wrapper(class="animate__animated animate__fadeInDown")
        .accordion--title
            h2 3 rules of using JSX for creating element in React
            span.fa.fa-caret-down
        .accordion--content
            ol 
                li 
                    p Only return 1 element (if you want to create multiple element you should use pair enclosing ) for example :
                    +display({
                        "id":"display3",
                        "html": true,
                        "css": true,
                        "js": true,
                        "height":"400px",
                        "codeid":"root2",
                        "htmlfile":"code3"
                    })

                    .result__container--outer 
                        h3 Result
                        .result__container--outer-render
                li 
                    p 
                        | Always close all element tag, if you forget to close element tag it will give an error 
                        span.red "Unterminated JSX contents"
                li 
                    p 
                        | Use camelCase for attribute element for example :
                        br
                        span.example Instead using #[strong class] attribute in HTML, in JSX we are using #[strong className] 
                        br
                        span.example Instead using #[strong onclick] attribute in HTML, in JSX we are using #[strong onClick]
                        
    section.section__wrapper(class="animate__animated animate__fadeInDown")
        .accordion--title 
            h2 How to make reusable component with React 
            span.fa.fa-caret-down
        .accordion--content 
            p In react we can reuse component that we already created but <strong>we can assign different data to element using props</strong>. For example :
            +display({
                "id":"display5",
                "html": true,
                "css": false,
                "js": true,
                "height":"600px",
                "htmlfile":"code5"
            })

            .result__container--outer 
                h3 Result
                .result__container--outer-render
        
    section.section__wrapper(class="animate__animated animate__fadeInDown")
        .accordion--title 
            h2 Looping with React 
            span.fa.fa-caret-down
        .accordion--content 
            p 
                | Looping method is very important in case we want to show a lot of data.
                | In this section we can use <strong>map or forEach</strong> to loop item in array. 
                | For example :
            +display({
                "id":"display6",
                "html": true,
                "css": false,
                "js": true,
                "height":"600px",
                "htmlfile":"code6"
            })

            .result__container--outer 
                h3 Result
                .result__container--outer-render

    section.section__wrapper(class="animate__animated animate__fadeInDown")
        .accordion--title 
            h2 Interactiviy with State and Hooks
            span.fa.fa-caret-down
        .accordion--content 
            p 
                | In React we can manipulate data when interactivity is happen on element such as Clicking Button, Hover etc. 
                | The data that always change we called it <strong>State</strong>. 
                | Meanwhile the functions tothat let you “hook into” React state and lifecycle features from function components we called it <strong>Hooks</strong>.
                | For example :
            +display({
                "id":"display7",
                "html": true,
                "css": false,
                "js": true,
                "height":"600px",
                "htmlfile":"code7"
            })

            .result__container--outer 
                h3 Result
                .result__container--outer-render
